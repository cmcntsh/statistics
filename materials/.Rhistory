, valid
, missing
, misspercent
, min
, q25
, median
, q75
, max
, range
, mean
, sd
, variance
, skewness
, skewness2
, SEskewness
, kurtosis
, SEkurtosis
, ShapWilk
, ShapWilkp) %>% # reorder
print()
dataset %>%
dplyr::select(interval,ratio) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2))
, min = min(.,na.rm = TRUE)
, q25 = quantile(., 0.25,na.rm = TRUE)
, median = median(.,na.rm = TRUE)
, q75 = quantile(., 0.75,na.rm = TRUE)
, max = max(.,na.rm = TRUE)
, range = diff(range(.))
, mean = round(mean(.,na.rm = TRUE),2)
, sd = round(sd(.,na.rm = TRUE),2)
, variance = round(var(.,na.rm = TRUE),2)
, skewness = round(skewFunct(.,na.rm = TRUE),2)
, SEskewness = round(SEskewFunct(.,na.rm = TRUE),2)
, kurtosis = round(kurtosisFunct(.,na.rm = TRUE),2)
, SEkurtosis = round(SEkurtosisFunct(.,na.rm = TRUE),2)
, ShapWilk = ifelse(sd(.)!=0,round(shapiro.test(.)$statistic,2),NA)
, ShapWilkp = ifelse(sd(.)!=0,round(shapiro.test(.)$p.value,2),NA))) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent
, min
, q25
, median
, q75
, max
, range
, mean
, sd
, variance
, skewness
, SEskewness
, kurtosis
, SEkurtosis
, ShapWilk
, ShapWilkp) %>% # reorder
print()
dataset %>%
dplyr::select(interval,ratio) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2))
, min = min(.,na.rm = TRUE)
, q25 = quantile(., 0.25,na.rm = TRUE)
, median = median(.,na.rm = TRUE)
, q75 = quantile(., 0.75,na.rm = TRUE)
, max = max(.,na.rm = TRUE)
, range = diff(range(.))
, mean = round(mean(.,na.rm = TRUE),2)
, sd = round(sd(.,na.rm = TRUE),2)
, variance = round(var(.,na.rm = TRUE),2)
, skewness = round(skewFunct(.,na.rm = TRUE),2)
, SEskewness = round(SEskewFunct(.,na.rm = TRUE),2)
, kurtosis = round(kurtosisFunct(.,na.rm = TRUE),2)
, SEkurtosis = round(SEkurtosisFunct(.,na.rm = TRUE),2)
, ShapWilk = ifelse(sd(.)!=0,round(shapiro.test(.)$statistic,2),NA)
, ShapWilkp = ifelse(sd(.)!=0,round(shapiro.test(.)$p.value,2),NA))) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent
, min
, q25
, median
, q75
, max
, range
, mean
, sd
, variance
, skewness
, SEskewness
, kurtosis
, SEkurtosis
, ShapWilk
, ShapWilkp) %>% # reorder
print()
# List the packages needed
packages <- c("tidyverse","summarytools","Hmisc", "moments")
# Check if each package is installed already. If not, install the package.
for (i in packages){
if(! i %in% installed.packages()){
install.packages(i,dependencies = TRUE)
}
# Show each package that is checked.
print(i)
# Load each package into memory so we can use it.
library(i,character.only=TRUE)
}
# List the packages needed
packages <- c("tidyverse","summarytools","Hmisc")
# Check if each package is installed already. If not, install the package.
for (i in packages){
if(! i %in% installed.packages()){
install.packages(i,dependencies = TRUE)
}
# Show each package that is checked.
print(i)
# Load each package into memory so we can use it.
library(i,character.only=TRUE)
}
spssSkewKurtosis=function(x) {
w=length(x)
m1=mean(x)
m2=sum((x-m1)^2)
m3=sum((x-m1)^3)
m4=sum((x-m1)^4)
s1=sd(x)
skew=w*m3/(w-1)/(w-2)/s1^3
sdskew=sqrt( 6*w*(w-1) / ((w-2)*(w+1)*(w+3)) )
kurtosis=(w*(w+1)*m4 - 3*m2^2*(w-1)) / ((w-1)*(w-2)*(w-3)*s1^4)
sdkurtosis=sqrt( 4*(w^2-1) * sdskew^2 / ((w-3)*(w+5)) )
mat=matrix(c(skew,kurtosis, sdskew,sdkurtosis), 2,
dimnames=list(c("skew","kurtosis"), c("estimate","se")))
return(mat)
}
spssSkewKurtosis(dataset$interval)
spssSkewKurtosis(dataset$interval)[1,1]
# http://www.stat.cmu.edu/~hseltman/files/spssSkewKurtosis.R
skewFunct=function(x, na.rm=FALSE){
w = ifelse(na.rm==TRUE,length(x)-sum(is.na(x),na.rm=TRUE),length(x))
m1=mean(x,na.rm=na.rm)
m2=sum((x-m1)^2,na.rm=na.rm)
m3=sum((x-m1)^3,na.rm=na.rm)
m4=sum((x-m1)^4,na.rm=na.rm)
s1=sd(x,na.rm=na.rm)
skew=w*m3/(w-1)/(w-2)/s1^3
return(skew)
}
kurtosisFunct=function(x, na.rm=FALSE){
w = ifelse(na.rm==TRUE,length(x)-sum(is.na(x),na.rm=TRUE),length(x))
m1=mean(x)
m2=sum((x-m1)^2)
m3=sum((x-m1)^3)
m4=sum((x-m1)^4)
s1=sd(x)
kurtosis=(w*(w+1)*m4 - 3*m2^2*(w-1)) / ((w-1)*(w-2)*(w-3)*s1^4)
return(kurtosis)
}
SEskewFunct=function(x, na.rm=FALSE){
w = ifelse(na.rm==TRUE,length(x)-sum(is.na(x),na.rm=TRUE),length(x))
m1=mean(x)
m2=sum((x-m1)^2)
m3=sum((x-m1)^3)
m4=sum((x-m1)^4)
s1=sd(x)
sdskew=sqrt( 6*w*(w-1) / ((w-2)*(w+1)*(w+3)) )
return(sdskew)
}
SEkurtosisFunct=function(x, na.rm=FALSE){
w = ifelse(na.rm==TRUE,length(x)-sum(is.na(x),na.rm=TRUE),length(x))
m1=mean(x)
m2=sum((x-m1)^2)
m3=sum((x-m1)^3)
m4=sum((x-m1)^4)
s1=sd(x)
sdskew=sqrt( 6*w*(w-1) / ((w-2)*(w+1)*(w+3)) )
sdkurtosis=sqrt( 4*(w^2-1) * sdskew^2 / ((w-3)*(w+5)) )
return(sdkurtosis)
}
dataset %>%
dplyr::select(interval,ratio) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2))
, min = min(.,na.rm = TRUE)
, q25 = quantile(., 0.25,na.rm = TRUE)
, median = median(.,na.rm = TRUE)
, q75 = quantile(., 0.75,na.rm = TRUE)
, max = max(.,na.rm = TRUE)
, range = diff(range(.))
, mean = round(mean(.,na.rm = TRUE),2)
, sd = round(sd(.,na.rm = TRUE),2)
, variance = round(var(.,na.rm = TRUE),2)
, skewness = round(skewFunct(.,na.rm = TRUE),2)
, SEskewness = round(SEskewFunct(.,na.rm = TRUE),2)
, kurtosis = round(kurtosisFunct(.,na.rm = TRUE),2)
, SEkurtosis = round(SEkurtosisFunct(.,na.rm = TRUE),2)
, ShapWilk = ifelse(sd(.)!=0,round(shapiro.test(.)$statistic,2),NA)
, ShapWilkp = ifelse(sd(.)!=0,round(shapiro.test(.)$p.value,2),NA))) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent
, min
, q25
, median
, q75
, max
, range
, mean
, sd
, variance
, skewness
, SEskewness
, kurtosis
, SEkurtosis
, ShapWilk
, ShapWilkp) %>% # reorder
print()
dataset %>%
dplyr::select(interval,ratio) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2)))) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent) %>% # reorder
print()
dataset %>%
dplyr::select(interval,ratio) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2))
, n = n)) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent) %>% # reorder
print()
dataset %>%
dplyr::select(nominal, ordinal) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2))
, n = n)) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent) %>% # reorder
print()
dataset %>%
dplyr::select(nominal, ordinal) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2)))) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent) %>% # reorder
print()
dataset %>%
dplyr::select(nominal, ordinal) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2))
, cats = n_distinct)) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent) %>% # reorder
print()
dataset %>%
dplyr::select(nominal, ordinal) %>%
dplyr::summarise_each(funs(class = class
, valid = sum(!is.na(.),na.rm = TRUE)
, missing = sum(is.na(.))
, misspercent = scales::percent(round(sum(is.na(.))/sum(!is.na(.),na.rm = TRUE),2))
, cats = n_distinct)) %>%
tidyr::gather(stat,val) %>%
tidyr::separate(stat, into = c("var", "stat"), sep = "_") %>%
tidyr::spread(stat, val) %>%
dplyr::select(var
, class
, valid
, missing
, misspercent
, cats) %>% # reorder
print()
dataset %>%
group_by(interval) %>%
summarize(frequency = n()) %>%
pander
dataset %>%
group_by(interval) %>%
summarize(.,frequency = n()) %>%
pander
dataset %>%
group_by(as_factor(interval)) %>%
summarize(frequency = n()) %>%
pander
dataset %>%
dplyr::group_by(as_factor(interval)) %>%
dplyr::summarize(frequency = n()) %>%
pander
dataset %>%
dplyr::group_by(as_factor(interval)) %>%
dplyr::summarize(frequency = n()) #%>%
#pander
dataset %>%
dplyr::group_by(interval) %>%
dplyr::summarize(frequency = n()) #%>%
#pander
dataset %>%
dplyr::group_by(ratio) %>%
dplyr::summarize(frequency = n()) #%>%
#pander
dataset %>%
dplyr::group_by(nominal) %>%
dplyr::summarize(frequency = n()) #%>%
#pander
# List the packages needed
packages <- c("tidyverse","summarytools","Hmisc","pander")
# Check if each package is installed already. If not, install the package.
for (i in packages){
if(! i %in% installed.packages()){
install.packages(i,dependencies = TRUE)
}
# Show each package that is checked.
print(i)
# Load each package into memory so we can use it.
library(i,character.only=TRUE)
}
dataset %>%
dplyr::group_by(nominal) %>%
dplyr::summarize(frequency = n()) %>%
pander
dataset %>%
group_by(nominal) %>%
summarize(frequency = n()) %>%
arrange(desc(frequency)) %>%
mutate(relative_frequency = frequency/sum(frequency),
relative_cumulative_frequency = cumsum(relative_frequency),
relative_frequency = round(100*relative_frequency,2),
relative_cumulative_frequency = round(100*relative_cumulative_frequency,2),
nr = row_number(-frequency)) %>%
select(nr, everything())
dataset %>%
dplyr::group_by(nominal) %>%
dplyr::summarize(frequency = n()) %>%
dplyr::arrange(desc(frequency)) %>%
dplyr::mutate(relative_frequency = frequency/sum(frequency),
relative_cumulative_frequency = cumsum(relative_frequency),
relative_frequency = round(100*relative_frequency,2),
relative_cumulative_frequency = round(100*relative_cumulative_frequency,2),
nr = row_number(-frequency)) %>%
dplyr::select(nr, everything())
dataset %>%
freq(nominal, ordinal)
dataset %>%
freq(dataset$nominal, dataset$ordinal)
dataset %>%
freq(dataset$nominal)
dataset %>%
freq(dataset$ordinal)
dataset %>%
summarytools::freq(dataset$ordinal)
dataset %>%
summarytools::freq(dataset$interval)
summarytools::freq(dataset$interval)
summarytools::freq(dataset$nominal)
dataset %>%
summarytools::freq(nominal)
dataset %>%
summarytools::freq(nominal)
as.dataframe(dataset) %>%
summarytools::freq(nominal)
as.data.frame(dataset) %>%
summarytools::freq(nominal)
summarytools::freq(dataframe$nominal)
summarytools::freq(dataset$nominal)
summarytools::descr(dataset$interval)
summarytools::dfSummary(dataset)
View(summarytools::dfSummary(dataset))
view(summarytools::dfSummary(dataset))
# https://cran.r-project.org/web/packages/AMR/vignettes/freq.html
summarytools::freq(dataset, c("nominal","ordinal")
# https://cran.r-project.org/web/packages/AMR/vignettes/freq.html
summarytools::freq(dataset, c("nominal","ordinal"))
# https://cran.r-project.org/web/packages/AMR/vignettes/freq.html
summarytools::freq(dataset[c("nominal","ordinal")])
summarytools::descr(dataset[c("interval","ratio")])
view(summarytools::dfSummary(dataset))
view(summarytools::dfSummary(as.data.frame(dataset)))
view(dfSummary(as.data.frame(dataset)))
dfSummary(dataset, plain.ascii = FALSE, style = "grid",
graph.magnif = 0.75, valid.col = FALSE, tmp.img.dir = "/tmp")
view(dfSummary(dataset, plain.ascii = FALSE, style = "grid",
graph.magnif = 0.75, valid.col = FALSE, tmp.img.dir = "/tmp"))
print(colnames(dataset$nominal))
print(colnames(dataset))
print(colnames(dataset[1]))
ggplot(data=dataset, aes(x=nominal)) +
geom_bar(stat="bin")
ggplot(data=dataset, aes(x=nominal)) +
geom_bar(stat="count")
ggplot(data=dataset, aes(x=nominal, y = perc)) +
geom_bar(stat = "identity")
dataset %>%
count(nominal) %>%
mutate(percent = n/nrow(nominal)) -> dataset2
ggplot(data=dataset2, aes(x=nominal)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data=dataset, aes(x=nominal)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data=dataset, aes(x=ordinal)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data=dataset, aes(x= "", y = interval)) +
geom_boxplot()
ggplot(data=dataset, aes(x=ratio)) +
geom_histogram()
ggplot(data=dataset, aes(x=ratio)) +
geom_histogram(binwidth = 1)
ggplot(data=dataset, aes(x=ratio)) +
geom_histogram(binwidth = .1)
ggplot(data=dataset, aes(x=ratio)) +
geom_histogram(binwidth = .2)
ggplot(data=dataset, aes(x=interval, y=ratio)) +
geom_dotplot()
ggplot(data=dataset, aes(x=interval, y=ratio)) +
geom_point()
# https://cran.r-project.org/web/packages/summarytools/vignettes/Introduction.html
view(dfSummary(dataset, plain.ascii = FALSE, style = "grid",
graph.magnif = 0.75, valid.col = FALSE, tmp.img.dir = "/tmp"))
View(dataset)
glimpse(dataset)
str(dataset)
#View(dataset)
glimpse(dataset)
str(dataset)
#View(dataset)
#glimpse(dataset)
str(dataset)
#View(dataset)
glimpse(dataset)
#str(dataset)
#View(dataset)
#glimpse(dataset)
str(dataset)
class(data)
class(data$nominal)
class(data)
class(data$nominal)
class(dataset)
class(dataset$nominal)
#levels(data$nominal)
class(dataset$ordinal)
#levels(data$ordinal)
class(dataset$interval)
class(dataset$ratio)
class(dataset)
class(dataset$nominal)
levels(data$nominal)
class(dataset)
class(dataset$nominal)
class(dataset$ordinal)
class(dataset$interval)
class(dataset$ratio)
